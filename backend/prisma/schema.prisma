// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String   @id @default(uuid())
  name       String
  email      String   @unique
  password   String
  bio        String?
  isVerified Boolean  @default(false)
  role       String   @default("User")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // store hashed refresh token for rotation
  refreshTokenHash String? @db.Text

  posts    Post[]
  comments Comment[]
  skills   UserSkill[]

  connectionsInitiated Connection[] @relation("UserConnectionsInitiated")
  connectionsReceived  Connection[] @relation("UserConnectionsReceived")

  messagesSent     Message[]      @relation("MessagesSent")
  messagesReceived Message[]      @relation("MessagesReceived")
  Connection       Connection[]
  Notification     Notification[]
}

model Post {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  authorId String
  author   User      @relation(fields: [authorId], references: [id])
  comments Comment[]
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())

  authorId String
  postId   String
  author   User   @relation(fields: [authorId], references: [id])
  post     Post   @relation(fields: [postId], references: [id])
}

model Skill {
  id    String      @id @default(uuid())
  name  String      @unique
  users UserSkill[]
}

model UserSkill {
  id      String @id @default(uuid())
  userId  String
  skillId String

  user  User  @relation(fields: [userId], references: [id])
  skill Skill @relation(fields: [skillId], references: [id])
}

model Connection {
  id          String   @id @default(uuid())
  requesterId String
  receiverId  String
  status      String   @default("pending") // pending | accepted | rejected
  createdAt   DateTime @default(now())

  requester User    @relation("UserConnectionsInitiated", fields: [requesterId], references: [id])
  receiver  User    @relation("UserConnectionsReceived", fields: [receiverId], references: [id])
  User      User?   @relation(fields: [userId], references: [id])
  userId    String?
}

model Message {
  id         String   @id @default(uuid())
  senderId   String
  receiverId String
  content    String
  createdAt  DateTime @default(now())

  sender   User @relation("MessagesSent", fields: [senderId], references: [id])
  receiver User @relation("MessagesReceived", fields: [receiverId], references: [id])
}

model Notification {
  id        String   @id @default(uuid())
  userId    String
  type      String // e.g., "message", "connection", "comment"
  content   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
}
