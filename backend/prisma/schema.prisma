// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String   @id @default(uuid())
  name                  String
  email                 String   @unique
  password              String
  bio                   String?
  city                  String?
  madhab                String?
  halalCareerPreference Boolean? // onboarding preference
  avatar                String? // profile picture URL

  isVerified Boolean  @default(false)
  role       String   @default("User")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  refreshTokenHash String? @db.Text
  fcmToken         String? @unique

  posts    Post[]
  comments Comment[]
  skills   UserSkill[]

  connectionsInitiated Connection[] @relation("RequesterConnections")
  connectionsReceived  Connection[] @relation("ReceiverConnections")

  messagesSent Message[] @relation("MessagesSent")
  messagesRecv Message[] @relation("MessagesReceived")

  notifications Notification[]
  likes         PostLike[]
}

model Post {
  id        String   @id @default(uuid())
  content   String
  image     String? // optional image on post
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  authorId String
  author   User   @relation(fields: [authorId], references: [id])

  comments Comment[]
  likes    PostLike[]
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())

  authorId String
  postId   String

  author User @relation(fields: [authorId], references: [id])
  post   Post @relation(fields: [postId], references: [id])
}

model PostLike {
  id     String @id @default(uuid())
  userId String
  postId String

  user User @relation(fields: [userId], references: [id])
  post Post @relation(fields: [postId], references: [id])

  @@unique([userId, postId]) // prevent duplicate likes
}

model Skill {
  id    String      @id @default(uuid())
  name  String      @unique
  users UserSkill[]
}

model UserSkill {
  id      String @id @default(uuid())
  userId  String
  skillId String

  user  User  @relation(fields: [userId], references: [id])
  skill Skill @relation(fields: [skillId], references: [id])

  @@unique([userId, skillId])
}

model Connection {
  id          String           @id @default(uuid())
  requesterId String
  receiverId  String
  status      ConnectionStatus @default(PENDING)
  createdAt   DateTime         @default(now())

  requester User @relation("RequesterConnections", fields: [requesterId], references: [id])
  receiver  User @relation("ReceiverConnections", fields: [receiverId], references: [id])

  @@unique([requesterId, receiverId])
}

model Message {
  id         String   @id @default(uuid())
  senderId   String
  receiverId String
  content    String
  createdAt  DateTime @default(now())
  seen       Boolean  @default(false)

  sender   User @relation("MessagesSent", fields: [senderId], references: [id])
  receiver User @relation("MessagesReceived", fields: [receiverId], references: [id])
}

model Notification {
  id        String   @id @default(uuid())
  userId    String
  type      String // e.g. "MESSAGE", "LIKE", "COMMENT", "CONNECTION"
  content   String // short description
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
}

enum ConnectionStatus {
  PENDING
  ACCEPTED
  REJECTED
}
